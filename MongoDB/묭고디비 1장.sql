mongodb는 웹 애플리케이션과 인터넷 기반을 위해 설계된 데이터베이스 관리 시스템.
데이터 모델과 지속성 전략은 높은 읽기 쓰기 효율과 자동 장애조치를 통한 확장의 용이성을 염두에 두고 만들어짐.

개발자들이 몽고디비를 사용하는 이유는 확장성 때문이 아닌 직관적인 데이터 모델 때문이다.
몽고디비는 정보를 행 대신에 도큐먼트에 저장한다.

몽고디비의 도큐먼트 형식은 임의의 데이터 구조를 저장하는 스키마로 잘 알려진 JSON에 기반한다.
키와 값으로 이루어져있고, 중첩에 제한이 없다.
프로그래밍 언어에서 dict나 hash map과 비슷하다.

도큐먼트 기반의 데이터 모델은 풍부학고 계층적인 구조의 데이터를 표현할 수 있다.
복잡한 정보를 하나의 도큐먼트로 표현가능.

# 1.2 몽고디비의 핵심기능

## 1.2.1 도큐먼트 데이터 모델

몽고디비는 도큐먼트 지향적인 모델이다.
도큐먼트는 본질적으로 속성의 이름과 값으로 이루어진 쌍의 집합이다.

몽고디비가 도큐먼트의 모음과 같이 데이터를 컬렉션에 도큐먼트를 저장하는 반면, mySQL은 데이터를 테이블에 행으로서 저장한다.
도큐먼트 지향적인 데이터 모델에서는 객체를 자연스럽게 모아 놓은 형태로 표현함으로써 객체를 전체적으로 작업할 수 있다.
도큐먼트에는 미리 정해진 스키마가 없다. -> 컬렉션으로 되어 있기 때문에 굳이 스키마가 필요하지 않다.

장점
1. 데이터베이스가 아닌 애플리케이션이 데이터 구조를 정한다.
2. 가변적인 속성을 갖는 데이터를 표현할 수 있다는 것이다.

## 1.2.2 애드혹 쿼리
애드혹 쿼리는 시스템이 받아들일 수 있는 질의를 미리 정의할 필욕가 없다는 것이다.
질읙가 어떠한 조건을 갖더라도 올바른 구조이기만 하면 SQL 쿼리가 실행된다.
몽고디비 설계 목표 중 하나는 관계형 데이터베이스상에서 매우 필수적인 쿼리 언어 성능을 대부분 유지하는 것이다.

## 1.2.3 인덱스

몽고디비에서 인덱스는 B-Tree로 구현되어 있다.
몽고디비에도 Primary Key가 존재한다.
세컨더리 인덱스: 모든 데이터베이스가 행 또는 도큐먼트에 대한 인덱스를 허용하지 않는 인덱스.
NoSql 데이터베이스는 키-값 저장소로 간주되는데, 이는 어떤 세컨더리 인덱스도 허용하지 않음.
몽고디비는 세컨더리 인덱스를 허용함으로써 몽고디비는 사용자가 넓은 범위의 쿼리를 최적화하도록 허용한다.

몽고디비는 관계형 데이터베이스 시스템에서 볼 수 있는 모든 인덱스가 가능하다.

## 1.2.4 복제

몽고디비는 복제 세트라고 부르는 구성을 통해 데이터베이스 복제 기능을 제공함.
복제세트: 서버와 네트워크 장애가 발생할 경우를 대비해 중복성과 장애조치를 자동화를 위해 데이터를 여러 대의 서버에 분산한다.
복제 세트는 많은 몽고디비 서버로 구성되어 있고, 보통 각각의 몽고디비 서버는 분리된 물리 장비에 별도로 존재하며 이를 노드라 부른다.
띠라서 어느 순간이든지 하나의 노드는 복제 세트의 프라이머리 노드로 존재하며, 더불어 하나 또는 그 이상의 세컨더리 노드가 존재한다.

## 1.2.6 속도와 내구성

쓰기 속도와 내구성 사이에 역관계가 존재함.
쓰기 속도는 미리 정해진 식간 내에 데이터베이스가 얼마나 많은 수의 삽입, 수정, 삭제 명령을 처리할 수 있는가를 뜻한다.
내구성은 쓰기 연산이 디스크에 제대로 이루어졌다는 것을 확신할 수 있는 정도를 뜻한다.

몽고디비의 경우 쓰기 시맨틱스와 저널링을 통해 속도와 내구성 사이에서 타협을 이룰 수 있다.
몽고디비를 명령하고 잊어버리기 모드로 설정하면 확인을 기다릴 필요 없이 서버에 쓰기 작업을 전송할 수 있다.
저널링은 모든 쓰기에 대한 로그를 100ms마다 한 번씩 저널 파일에 기록한다.
쓰기 부하에 대한 성능을 향상시키기 위해 저널링을 하지 않은 채 서버를 실행할 수 있다. 이렇게 할 때의 단점은 불시에 셧다운 될 경우 데이터 파일이 손상될 수 있다는 점이다.

## 1.2.6 확장

하나의 노드에 대해 하드웨어를 업그레이드 하거나 추가함으로써 확장성을 높이는 것을 수직적 확장 혹은 상향식 확장이다.
수직적 확장은 간단하고 신뢰할만하며 비용이 절감되나, 어느정도 시점에 이르면 한계에 도달하여 더 이상 나은 장비로의 향상이 불가능.
수평적 확장은 단 하나의 노드를 업그레이드하는 대신에 데이터베이스를 여러 대의 서버에 분산시키는 것을 뜻한다.
몽고디비는 수평적 확장이 용이하도록 설계됐다. 샤딩으로 알려진 범위 기반 파티션 메커니즘을 통해 데이터를 여러 노드에 걸쳐 분산하는 것을 자동으로 관리해준다.

# 1.4 몽고디비를 사용하는 이유
몽고디비는 관계 데이터베이스와 키 값 저장소 시스템의 장점만 모아서 설계되었다.
-> 속도가 매우 빠르고 확장도 상대적으로 용이하다.
-> 수평적인 확장도 매우 용이하다.

몽고디비는 웹 애플리케이션, 분석과 로깅 애플리케이션 중간 정도의 캐시를 필요로 하는 애플리케이션에서 일차 데이터 저장 시스템으로 적합하다.
스키마가 존재하지 않는 데이터를 저장하기가 용이하므로 미리 구조가 알려지지 않은 데이터를 저장하는데 유용하다.

# 1.5 팁과 한계

1. 몽고디비는 보통 64비트 시스템에서 실행되어야 한다. 32비트는 4기가 메모리만 사용가능.
2. 몽고디비가 필요한 경우에 매모리를 자동으로 할당함.

